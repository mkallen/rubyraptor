
<%= render "welcome/header" %>





<p/>






Combining Easel.js and Box2d Demo.<br/>
Note: This demo only works in modern browsers. <br/><br/>
<canvas width="600" height="500" id="demoCanvas"></canvas>
<canvas width="600" height="500" id="debugCanvas"></canvas>
<div id="paused">Paused. Click to resume.</div><br/>
<div id="debug" class="button">Show/Hide Debug</div>
<script type="text/javascript" src="http://www.luxanimals.com/tutorials/birds/libs/jquery-1.7.1.min.js">//JQUERY</script>
<script type="text/javascript" src="http://www.luxanimals.com/tutorials/birds/libs/easel.js">//EASELjs</script>
<script type="text/javascript" src="http://code.createjs.com/createjs-2013.12.12.min.js">//CREATEjs</script>
<script type="text/javascript" src="http://www.luxanimals.com/tutorials/birds/libs/Box2dWeb-2.1.a.3.min.js">//Box2DWeb</script>
<script src="https://rawgithub.com/madrobby/keymaster/master/keymaster.js">//KEYBOARD_INPUT_HELPER</script>

<script type="text/javascript">

    var crunchycreatures = {};

    crunchycreatures.demo = (function() {

        // Box2d vars
        var b2Vec2 = Box2D.Common.Math.b2Vec2;
        var b2BodyDef = Box2D.Dynamics.b2BodyDef;
        var b2Body = Box2D.Dynamics.b2Body;
        var b2FixtureDef = Box2D.Dynamics.b2FixtureDef;
        var b2Fixture = Box2D.Dynamics.b2Fixture;
        var b2World = Box2D.Dynamics.b2World;
        var b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;
        var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;
        var b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

        // demo vars
        var canvas, context, debugCanvas, debugContext;
        var ballDelayCounter = 0; // counter for delaying creation of balls
        var focused = true;

        //canvas setup vars
        var canvasW, canvasH, loader;
        var sky, myActor;

        $('#debug').on('click', function() { $('#debugCanvas').toggle(); });  // toggle debug view

        $(document).ready(function() {
            // setup functions to run once page is loaded
            setup.canvas();
            window.onfocus = onFocus;
            window.onblur = onBlur;
        });

        function onFocus() { focused = true; box2d.pauseResume(false); $('#paused').css({'display':'none'}); }
        function onBlur() { focused = false; box2d.pauseResume(true); $('#paused').css({'display':'block'}); }

        (function() { //Actor class for sample moving object /by key press
            var Actor = function(color) {

                console.log("*** Actor Initialized ***");

                this.initialize(color);
            }

            //Define the easeljs object (what we see move on the screen)
            var p = Actor.prototype = new createjs.Shape();
            //Define the box2d physics object on top of the easeljs object (that interacts with other box2d physics objects)
            var actorFixture = new b2FixtureDef;
            var actorBodyDef = new b2BodyDef;
            var actorBody;

            var currentX = 100;
            var currentY = 100;
            var width = 150;
            var height = 50;
            var aScale, aWorld;

            p.pixelsPerSecond = 100;

            p.initialize = function(color) {

                //draw easeljs object
                p.graphics.beginFill(color).drawRoundRect(0,0,width,height, 10);

            }

            p.box2dInit = function(world, scale, density, friction)
            {
                aScale = scale;
                aWorld = world;

                actorFixture.density = density;
                actorFixture.friction = friction;
                actorFixture.shape = new b2PolygonShape;
                //easel rectange is height, width, box2d rectangle is height radias from center and width radius from center
                //so we must divide by two.
                actorFixture.shape.SetAsBox( (width/2) / scale, (height/2) / scale); //pixels x, y /box2d SCALE conversion

                //we must also offset the box2d position by half of easel object due to easel x,y set at top left 0,0 and box2d at CENTER of object.
                this.move(currentX + (width/2), currentY + (height/2));
            }

            p.move = function(x, y)
            {
                try{ //Destroy old position (if there is one)
                    //May not be the best way to do this, (but it works) //TODO FIXME
                    aWorld.DestroyBody(actorBody);
                }
                catch(e){
                    ///
                }

                //create new position
                actorBodyDef.type = b2Body.b2_staticBody;
                actorBodyDef.position.x = x / aScale;
                actorBodyDef.position.y = y / aScale;

                actorBody = aWorld.CreateBody(actorBodyDef);
                actorBody.CreateFixture(actorFixture);
            }

            p.movementCalculation = function(delta) {
                return (delta)/1000*p.pixelsPerSecond;
            }

            p.moveUp = function(delta) {
                this.y -= this.movementCalculation(delta);
                currentY = this.y
                this.move(currentX + (width/2), currentY + (height/2));
            }

            p.moveDown = function(delta) {
                this.y += this.movementCalculation(delta);
                currentY = this.y
                this.move(currentX + (width/2), currentY + (height/2));
            }

            p.moveLeft = function(delta) {
                this.x -= this.movementCalculation(delta);
                currentX = this.x
                this.move(currentX + (width/2), currentY + (height/2));
            }

            p.moveRight = function(delta) {
                this.x += this.movementCalculation(delta);
                currentX = this.x
                this.move(currentX + (width/2), currentY + (height/2));
            }

            window.Actor = Actor;
        }());

        /* ------ SETUP ------- */
// initial setup of canvas, contexts, and render loop

        var setup = (function() {



            var canvas = function() { //init()

                console.log("*** Canvas Init ***");

                canvas = document.getElementById('demoCanvas');
                debugCanvas = document.getElementById('debugCanvas');
                context = canvas.getContext('2d');
                debugContext = debugCanvas.getContext('2d');
                stage = new Stage(canvas);
                stage.snapPixelsEnabled = true;


                // grab canvas width and height for later calculations:
                canvasW = stage.canvas.width;
                canvasH = stage.canvas.height;

                console.log("CANVAS WIDTH: " + canvasW);
                console.log("CANVAS HEIGHT: " + canvasH);

                manifest = [
                    {src:"ball_blue.png", id:"ball_blue"},
                    {src:"hexagon.png", id:"sky"},
                    {src:"ball_red.png", id:"ball_red"},
                    {src:"ball_green.png", id:"ball_green"},
                    {src:"http://createjs.com/Demos/EaselJS/assets/parallaxHill2.png", id:"hill2"}
                ];

                loader = new createjs.LoadQueue(false);
                loader.addEventListener("complete", handleComplete);
                loader.loadManifest(manifest);

            }

            function handleComplete() {

                console.log("*** Canvas handleComplete ***");

                //Load the background image and scale it according to canvas height/width.
                skyImage = loader.getResult("sky");
                sky = new createjs.Shape();

                //offset here is just zooming the image in 20% and cutting off the edges
                var xOffset = (canvasW * 0.2);
                var yOffset = (canvasH * 0.2);

                sky.scaleX = (canvasW + xOffset) / skyImage.width;
                sky.scaleY = (canvasH + yOffset) / skyImage.height;

                sky.x = -(xOffset/2);
                sky.y = -(yOffset/2);
                sky.graphics.beginBitmapFill(skyImage).drawRect(0,0,canvasW + skyImage.width, canvasH + skyImage.height);

                stage.addChild(sky);

                //key input actor test
                myActor = stage.addChild(new Actor("#000"));
                myActor.x = 100;
                myActor.y = 100;

                /* ------ box2d SETUP on handleComplete------- */
                setup.ticker();
                box2d.setup();

            }

            var ticker = function() {

                console.log("*** Canvas tickerInit ***");

                Ticker.setFPS(30);
                //Ticker.useRAF = true;
                Ticker.addListener(crunchycreatures.demo);  // looks for "tick" function within the demo object

                //key press test
                createjs.Ticker.addEventListener("tick", tick);
                function tick(event) {
                    if (key.isPressed('up') || key.isPressed('w')) {
                        myActor.moveUp(event.delta);
                    }
                    if (key.isPressed('down') || key.isPressed('s')) {
                        myActor.moveDown(event.delta);
                    }
                    if (key.isPressed('left') || key.isPressed('a')) {
                        myActor.moveLeft(event.delta);
                    }
                    if (key.isPressed('right') || key.isPressed('d')) {
                        myActor.moveRight(event.delta);
                    }
                }

            }

            return {
                canvas: canvas,
                ticker: ticker
            }
        })();

        /* ------- balls --------- */
// bitmap balls to be sent to box2d

        var balls = (function() {

            var spawn = function() {

                var ball = loader.getResult("ball_blue");//"ball_blue.png";
                var colorball = Math.round(Math.random()*30);
                if (colorball % 3 ==0)
                    ball = loader.getResult("ball_green");//"ball_green.png";
                if (colorball % 5 ==0)
                    ball = loader.getResult("ball_red");//"ball_red.png";

                var ballBMP = new Bitmap(ball);//new Bitmap("http://www.luxanimals.com/tutorials/birds/images/bird.png");
                ballBMP.x = Math.round(Math.random()*30);//Math.round(Math.random()*500);
                ballBMP.y = 155;//Math.round(Math.random()*500); //-30;
                ballBMP.regX = 25;   // important to set origin point to center of your bitmap
                ballBMP.regY = 25;
                ballBMP.snapToPixel = true;
                ballBMP.mouseEnabled = false;
                stage.addChild(ballBMP);
                box2d.createBall(ballBMP);
            }

            return {
                spawn: spawn
            }
        })();

        /* ------- Box2D --------- */
// handles all physics movement

        var box2d = (function() {

            // important box2d scale and speed vars
            var SCALE = 30, STEP = 40, TIMESTEP = 1/STEP, BODIESALLOWED = 15;

            var world;
            var lastTimestamp = Date.now();
            var fixedTimestepAccumulator = 0;
            var bodiesToRemove = [];
            var actors = [];
            var bodies = [];

            // box2d world setup and boundaries
            var setup = function() {

                console.log("*** Box2d setup ***");

                world = new b2World(new b2Vec2(1,1), true); //(0, 10)
                addDebug();

                //for rectangle boundary xy position
                var rectOffsetA = 25;
                var rectOffsetB = 10;
                var rectDensity = 1;
                var rectFriction = 2;

                // boundaries - ceiling
                var topFixture = new b2FixtureDef;
                topFixture.density = rectDensity;
                topFixture.friction = rectFriction;
                //topFixture.restitution = 1;
                topFixture.shape = new b2PolygonShape;
                topFixture.shape.SetAsBox( (canvasW + rectOffsetA) / SCALE, rectOffsetB / SCALE); //pixels x, y /box2d SCALE conversion
                var topBodyDef = new b2BodyDef;
                topBodyDef.type = b2Body.b2_staticBody;
                topBodyDef.position.x = -rectOffsetA / SCALE;
                topBodyDef.position.y = -rectOffsetB / SCALE;
                var top = world.CreateBody(topBodyDef);
                top.CreateFixture(topFixture);
                // boundaries - floor
                var floorFixture = new b2FixtureDef;
                floorFixture.density = rectDensity;
                floorFixture.friction = rectFriction;
                //floorFixture.restitution = 1;
                floorFixture.shape = new b2PolygonShape;
                floorFixture.shape.SetAsBox( (canvasW + rectOffsetA) / SCALE, rectOffsetB / SCALE);
                var floorBodyDef = new b2BodyDef;
                floorBodyDef.type = b2Body.b2_staticBody;
                floorBodyDef.position.x = -rectOffsetA / SCALE;
                floorBodyDef.position.y = (canvasH + rectOffsetB) / SCALE;
                var floor = world.CreateBody(floorBodyDef);
                floor.CreateFixture(floorFixture);
                // boundaries - left
                var leftFixture = new b2FixtureDef;
                leftFixture.density = rectDensity;
                leftFixture.friction = rectFriction;
                leftFixture.shape = new b2PolygonShape;
                leftFixture.shape.SetAsBox(rectOffsetB / SCALE, (canvasH + rectOffsetA) / SCALE);
                var leftBodyDef = new b2BodyDef;
                leftBodyDef.type = b2Body.b2_staticBody;
                leftBodyDef.position.x = -rectOffsetB / SCALE;
                leftBodyDef.position.y = -rectOffsetA / SCALE;
                var left = world.CreateBody(leftBodyDef);
                left.CreateFixture(leftFixture);
                // boundaries - right
                var rightFixture = new b2FixtureDef;
                rightFixture.density = rectDensity;
                rightFixture.friction = rectFriction;
                rightFixture.shape = new b2PolygonShape;
                rightFixture.shape.SetAsBox(rectOffsetB / SCALE, (canvasH + rectOffsetA) / SCALE);
                var rightBodyDef = new b2BodyDef;
                rightBodyDef.type = b2Body.b2_staticBody;
                rightBodyDef.position.x = (canvasW + rectOffsetB) / SCALE;
                rightBodyDef.position.y = -rectOffsetA / SCALE;
                var right = world.CreateBody(rightBodyDef);
                right.CreateFixture(rightFixture);

                //TRIANGLES
                //for triangle boundary xy position
                var triOffsetC = -150;
                var triOffsetD = 0;
                var triDensity = 1;
                var triFriction = 2;

                //triangle top right
                var triTopRight = new b2FixtureDef;
                triTopRight.shape = new b2PolygonShape;
                triTopRight.density = triDensity;
                triTopRight.friction = triFriction;
                triTopRight.shape.SetAsArray([
                    new b2Vec2(0, 0),
                    new b2Vec2(5, 0),
                    new b2Vec2(5, 5)], 3
                ); //triangle shape
                var triTopRightBodyDef = new b2BodyDef;
                triTopRightBodyDef.type = b2Body.b2_staticBody;
                triTopRightBodyDef.position.Set( (canvasW + triOffsetC) / SCALE, (triOffsetD) / SCALE);
                var tri = world.CreateBody(triTopRightBodyDef);
                tri.CreateFixture(triTopRight);
                //triangle top left
                var triTopLeft = new b2FixtureDef;
                triTopLeft.shape = new b2PolygonShape;
                triTopLeft.density = triDensity;
                triTopLeft.friction = triFriction;
                triTopLeft.shape.SetAsArray([
                    new b2Vec2(5, 0),
                    new b2Vec2(0, 5),
                    new b2Vec2(0, 0)], 3
                ); //triangle shape
                var triTopLeftBodyDef = new b2BodyDef;
                triTopLeftBodyDef.type = b2Body.b2_staticBody;
                triTopLeftBodyDef.position.Set( (triOffsetD) / SCALE, (triOffsetD) / SCALE);
                var tri2 = world.CreateBody(triTopLeftBodyDef);
                tri2.CreateFixture(triTopLeft);
                //triangle bottom left
                var triBottomLeft = new b2FixtureDef;
                triBottomLeft.shape = new b2PolygonShape;
                triBottomLeft.density = triDensity;
                triBottomLeft.friction = triFriction;
                triBottomLeft.shape.SetAsArray([
                    new b2Vec2(5, 5),
                    new b2Vec2(0, 5),
                    new b2Vec2(0, 0)], 3
                ); //triangle shape
                var triBottomLeftBodyDef = new b2BodyDef;
                triBottomLeftBodyDef.type = b2Body.b2_staticBody;
                triBottomLeftBodyDef.position.Set( (triOffsetD) / SCALE, (canvasH + triOffsetC) / SCALE);
                var tri3 = world.CreateBody(triBottomLeftBodyDef);
                tri3.CreateFixture(triBottomLeft);
                //triangle bottom right
                var triBottomRight = new b2FixtureDef;
                triBottomRight.shape = new b2PolygonShape;
                triBottomRight.density = triDensity;
                triBottomRight.friction = triFriction;
                triBottomRight.shape.SetAsArray([
                    new b2Vec2(5, 5),
                    new b2Vec2(0, 5),
                    new b2Vec2(5, 0)], 3
                ); //triangle shape
                var triBottomRightBodyDef = new b2BodyDef;
                triBottomRightBodyDef.type = b2Body.b2_staticBody;
                triBottomRightBodyDef.position.Set( (canvasW + triOffsetC) / SCALE, (canvasH + triOffsetC) / SCALE);
                var tri4 = world.CreateBody(triBottomRightBodyDef);
                tri4.CreateFixture(triBottomRight);


                myActor.box2dInit(world, SCALE, 1, 2);

            }

            // box2d debugger
            var addDebug = function() {
                var debugDraw = new b2DebugDraw();
                debugDraw.SetSprite(debugContext);
                debugDraw.SetDrawScale(SCALE);
                debugDraw.SetFillAlpha(0.7);
                debugDraw.SetLineThickness(1.0);
                debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
                world.SetDebugDraw(debugDraw);
            }

            // actor object - this is responsible for taking the body's position and translating it to your easel display object
            var actorObject = function(body, skin) {
                this.body = body;
                this.skin = skin;
                this.update = function() {  // translate box2d positions to pixels
                    this.skin.rotation = this.body.GetAngle() * (180 / Math.PI);
                    this.skin.x = this.body.GetWorldCenter().x * SCALE;
                    this.skin.y = this.body.GetWorldCenter().y * SCALE;
                }
                actors.push(this);
            }

            // create ball body shape and assign actor object
            var createBall = function(skin) {
                var ballFixture = new b2FixtureDef;
                ballFixture.density = 0.003; //1;
                ballFixture.restitution = 1.14 ;//0.6;
                ballFixture.friction = 0.5;
                ballFixture.shape = new b2CircleShape(24 / SCALE);
                var ballBodyDef = new b2BodyDef;
                ballBodyDef.type = b2Body.b2_dynamicBody;
                ballBodyDef.position.x = skin.x / SCALE;
                ballBodyDef.position.y = skin.y / SCALE;
                var ball = world.CreateBody(ballBodyDef);
                ball.CreateFixture(ballFixture);

                // assign actor
                var actor = new actorObject(ball, skin);
                ball.SetUserData(actor);  // set the actor as user data of the body so we can use it later: body.GetUserData()
                bodies.push(ball);
            }

            // remove actor and it's skin object
            var removeActor = function(actor) {
                stage.removeChild(actor.skin);
                actors.splice(actors.indexOf(actor),1);
            }

            // box2d update function. delta time is used to avoid differences in simulation if frame rate drops
            var update = function() {
                var now = Date.now();
                var dt = now - lastTimestamp;
                fixedTimestepAccumulator += dt;
                lastTimestamp = now;
                while(fixedTimestepAccumulator >= STEP) {
                    // remove bodies before world timestep
                    for(var i=0, l=bodiesToRemove.length; i<l; i++) {
                        removeActor(bodiesToRemove[i].GetUserData());
                        bodiesToRemove[i].SetUserData(null);
                        world.DestroyBody(bodiesToRemove[i]);
                    }
                    bodiesToRemove = [];

                    // update active actors
                    for(var i=0, l=actors.length; i<l; i++) {
                        actors[i].update();
                    }

                    world.Step(TIMESTEP, 10, 10);

                    fixedTimestepAccumulator -= STEP;
                    world.ClearForces();
                    world.m_debugDraw.m_sprite.graphics.clear();
                    world.DrawDebugData();
                    if(bodies.length > BODIESALLOWED) {
                        bodiesToRemove.push(bodies[0]);
                        bodies.splice(0,1);
                    }
                }
            }

            var pauseResume = function(p) {
                if(p) { TIMESTEP = 0;
                } else { TIMESTEP = 1/STEP; }
                lastTimestamp = Date.now();
            }

            return {
                setup: setup,
                update: update,
                createBall: createBall,
                pauseResume: pauseResume
            }
        })();

        /* ------- UPDATE -------- */
// main update loop for rendering assets to canvas

        var tick = function(dt, paused) {
            if(focused) {
                box2d.update();
                stage.update();

                //make balls appear in arena
                ballDelayCounter++;
                if(ballDelayCounter % 50 === 0) {  // delay so it doesn't spawn a ball on every frame
                    ballDelayCounter = 0;
                    balls.spawn();
                }


            }
        }

        /* ------- GLOBAL -------- */
// main global functions

        return {
            tick: tick
        }

    }());



</script>







</div> <!-- /container -->